#!/bin/bash

# Script para testar os endpoints de tags
# Requer que o servi√ßo esteja rodando em http://localhost:3000

BASE_URL="http://localhost:3000"
JWT_TOKEN=""

echo "üß™ Testando endpoints de Tags"
echo "=============================="

# Fun√ß√£o para fazer login e obter token JWT
login() {
    echo "üîê Fazendo login..."
    
    # Substitua com credenciais v√°lidas do seu sistema
    LOGIN_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/login" \
        -H "Content-Type: application/json" \
        -d '{
            "email": "admin@company.com",
            "password": "password123"
        }')
    
    if [ $? -eq 0 ]; then
        JWT_TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$JWT_TOKEN" ]; then
            echo "‚úÖ Login realizado com sucesso"
            echo "Token: ${JWT_TOKEN:0:20}..."
        else
            echo "‚ùå Falha ao extrair token JWT"
            echo "Resposta: $LOGIN_RESPONSE"
            exit 1
        fi
    else
        echo "‚ùå Falha na requisi√ß√£o de login"
        exit 1
    fi
}

# Fun√ß√£o para criar uma tag
create_tag() {
    echo "üìù Criando tag de teste..."
    
    CREATE_RESPONSE=$(curl -s -X POST "$BASE_URL/tags" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "label": "Candidato Promissor",
            "color": "#10B981",
            "textColor": "#FFFFFF"
        }')
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Tag criada com sucesso"
        echo "Resposta: $CREATE_RESPONSE"
        
        # Extrair ID da tag criada para testes subsequentes
        TAG_ID=$(echo $CREATE_RESPONSE | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$TAG_ID" ]; then
            echo "ID da tag: $TAG_ID"
            export TAG_ID
        fi
    else
        echo "‚ùå Falha ao criar tag"
        echo "Resposta: $CREATE_RESPONSE"
    fi
}

# Fun√ß√£o para listar todas as tags
list_tags() {
    echo "üìã Listando todas as tags..."
    
    LIST_RESPONSE=$(curl -s -X GET "$BASE_URL/tags" \
        -H "Authorization: Bearer $JWT_TOKEN")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Tags listadas com sucesso"
        echo "Resposta: $LIST_RESPONSE"
    else
        echo "‚ùå Falha ao listar tags"
        echo "Resposta: $LIST_RESPONSE"
    fi
}

# Fun√ß√£o para buscar uma tag espec√≠fica
get_tag() {
    if [ -z "$TAG_ID" ]; then
        echo "‚ö†Ô∏è  TAG_ID n√£o dispon√≠vel, pulando teste de busca"
        return
    fi
    
    echo "üîç Buscando tag espec√≠fica (ID: $TAG_ID)..."
    
    GET_RESPONSE=$(curl -s -X GET "$BASE_URL/tags/$TAG_ID" \
        -H "Authorization: Bearer $JWT_TOKEN")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Tag encontrada com sucesso"
        echo "Resposta: $GET_RESPONSE"
    else
        echo "‚ùå Falha ao buscar tag"
        echo "Resposta: $GET_RESPONSE"
    fi
}

# Fun√ß√£o para atualizar uma tag
update_tag() {
    if [ -z "$TAG_ID" ]; then
        echo "‚ö†Ô∏è  TAG_ID n√£o dispon√≠vel, pulando teste de atualiza√ß√£o"
        return
    fi
    
    echo "‚úèÔ∏è  Atualizando tag (ID: $TAG_ID)..."
    
    UPDATE_RESPONSE=$(curl -s -X PATCH "$BASE_URL/tags/$TAG_ID" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "color": "#EF4444",
            "textColor": "#000000"
        }')
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Tag atualizada com sucesso"
        echo "Resposta: $UPDATE_RESPONSE"
    else
        echo "‚ùå Falha ao atualizar tag"
        echo "Resposta: $UPDATE_RESPONSE"
    fi
}

# Fun√ß√£o para remover uma tag
delete_tag() {
    if [ -z "$TAG_ID" ]; then
        echo "‚ö†Ô∏è  TAG_ID n√£o dispon√≠vel, pulando teste de remo√ß√£o"
        return
    fi
    
    echo "üóëÔ∏è  Removendo tag (ID: $TAG_ID)..."
    
    DELETE_RESPONSE=$(curl -s -X DELETE "$BASE_URL/tags/$TAG_ID" \
        -H "Authorization: Bearer $JWT_TOKEN")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Tag removida com sucesso"
        echo "C√≥digo de resposta: $DELETE_RESPONSE"
    else
        echo "‚ùå Falha ao remover tag"
        echo "Resposta: $DELETE_RESPONSE"
    fi
}

# Fun√ß√£o para testar endpoint sem autentica√ß√£o
test_unauthorized() {
    echo "üö´ Testando acesso sem autentica√ß√£o..."
    
    UNAUTH_RESPONSE=$(curl -s -w "%{http_code}" -X GET "$BASE_URL/tags")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Requisi√ß√£o sem autentica√ß√£o retornou erro apropriado"
        echo "Resposta: $UNAUTH_RESPONSE"
    else
        echo "‚ùå Falha na requisi√ß√£o sem autentica√ß√£o"
    fi
}

# Executar testes
main() {
    echo "üöÄ Iniciando testes dos endpoints de tags..."
    echo ""
    
    # Teste sem autentica√ß√£o
    test_unauthorized
    echo ""
    
    # Login
    login
    echo ""
    
    if [ -z "$JWT_TOKEN" ]; then
        echo "‚ùå N√£o foi poss√≠vel obter token JWT. Abortando testes."
        exit 1
    fi
    
    # Testes com autentica√ß√£o
    create_tag
    echo ""
    
    list_tags
    echo ""
    
    get_tag
    echo ""
    
    update_tag
    echo ""
    
    # Listar novamente para ver as mudan√ßas
    list_tags
    echo ""
    
    delete_tag
    echo ""
    
    # Listar novamente para confirmar remo√ß√£o
    list_tags
    echo ""
    
    echo "üéâ Testes conclu√≠dos!"
}

# Executar fun√ß√£o principal
main
