// Configura√ß√£o do frontend
export interface AppConfig {
  backendUrl: string;
  companySlug: string;
}

// Fun√ß√£o para obter o slug da empresa do subdom√≠nio atual
function getCompanySlugFromDomain(): string {
  const hostname = window.location.hostname;
  
  // Padr√£o: slug-empresa.localhost
  const domainMatch = hostname.match(/^([^.]+)\.localhost$/);
  if (domainMatch) {
    return domainMatch[1];
  }
  
  // Padr√£o: localhost (desenvolvimento local)
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    return import.meta.env.VITE_DEFAULT_COMPANY_SLUG || 'gupy';
  }
  
  // Padr√£o: produ√ß√£o (ex: gupy.meudominio.com)
  const productionMatch = hostname.match(/^([^.]+)\./);
  if (productionMatch) {
    return productionMatch[1];
  }
  
  return import.meta.env.VITE_DEFAULT_COMPANY_SLUG || 'gupy';
}

// Fun√ß√£o para construir a URL do backend baseada no slug da empresa
function buildBackendUrl(companySlug: string): string {
  const hostname = window.location.hostname;
  const protocol = window.location.protocol;
  
  // Se uma URL espec√≠fica foi configurada via vari√°vel de ambiente, us√°-la
  if (import.meta.env.VITE_BACKEND_URL) {
    return import.meta.env.VITE_BACKEND_URL;
  }
  
  // Se estamos em localhost, usar a configura√ß√£o padr√£o
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    return 'http://localhost:3000';
  }
  
  // Novo padr√£o: mesmo dom√≠nio com /api/ para o backend
  // Ex: gupy.localhost -> https://gupy.localhost/api
  if (hostname.includes('.localhost')) {
    return `${protocol}//${hostname}/api`;
  }
  
  // Padr√£o: produ√ß√£o (ex: gupy.meudominio.com -> https://gupy.meudominio.com/api)
  if (hostname.includes('.')) {
    return `${protocol}//${hostname}/api`;
  }
  
  // Fallback para desenvolvimento local
  return 'http://localhost:3000';
}

// Configura√ß√£o da aplica√ß√£o
export const appConfig: AppConfig = {
  companySlug: getCompanySlugFromDomain(),
  backendUrl: buildBackendUrl(getCompanySlugFromDomain()),
};

// Fun√ß√£o para obter a configura√ß√£o atualizada (√∫til para mudan√ßas din√¢micas)
export function getCurrentConfig(): AppConfig {
  const companySlug = getCompanySlugFromDomain();
  return {
    companySlug,
    backendUrl: buildBackendUrl(companySlug),
  };
}

// Fun√ß√£o para validar se a configura√ß√£o est√° correta
export function validateConfig(): boolean {
  const config = getCurrentConfig();
  
  if (!config.companySlug || config.companySlug === '') {
    console.error('Slug da empresa n√£o p√¥de ser determinado');
    return false;
  }
  
  if (!config.backendUrl || config.backendUrl === '') {
    console.error('URL do backend n√£o p√¥de ser constru√≠da');
    return false;
  }
  
  return true;
}

// Log da configura√ß√£o para debug
if (import.meta.env.DEV) {
  console.log('üîß Configura√ß√£o da aplica√ß√£o:', appConfig);
  console.log('üåê Hostname atual:', window.location.hostname);
  console.log('üè¢ Slug da empresa:', appConfig.companySlug);
  console.log('üîó URL do backend:', appConfig.backendUrl);
}
