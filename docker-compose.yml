services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cognitive-ats-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Backend NestJS - Companies Service
  companies-backend:
    build:
      context: ./companies-service/backend
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-companies-backend-dev
    ports:
      - "${COMPANIES_BACKEND_PORT}:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_DATABASE=${DB_DATABASE}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - STORAGE_SERVICE_ENDPOINT=${STORAGE_SERVICE_ENDPOINT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - RESUMES_BUCKET_NAME=${RESUMES_BUCKET_NAME}
      - APPLICATIONS_QUEUE_NAME=${APPLICATIONS_QUEUE_NAME}
      - QUESTION_RESPONSES_QUEUE_NAME=${QUESTION_RESPONSES_QUEUE_NAME}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./companies-service/backend:/app
      - /app/node_modules
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Frontend React - Companies Service (Desenvolvimento)
  companies-frontend:
    build:
      context: ./companies-service/frontend
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-companies-frontend-dev
    ports:
      - "${COMPANIES_FRONTEND_PORT}:5173"
    volumes:
      - ./companies-service/frontend:/app
      - /app/node_modules
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # AI Service (FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: cognitive-ats-ai-service
    ports:
      - "${AI_SERVICE_PORT}:8000"
    environment:
      - DEFAULT_AI_PROVIDER=${DEFAULT_AI_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - JOB_CREATION_AI_MODEL=${JOB_CREATION_AI_MODEL}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-gpt-4}
      - DEFAULT_MAX_TOKENS=${DEFAULT_MAX_TOKENS:-1000}
      - DEFAULT_TEMPERATURE=${DEFAULT_TEMPERATURE:-0.7}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      # Variáveis para avaliação de candidatos
      - EVALUATION_PROVIDER=${EVALUATION_PROVIDER:-openai}
      - EVALUATION_MODEL=${EVALUATION_MODEL:-gpt-4}
    volumes:
      - ./ai-service:/app
    networks:
      - cognitive-ats-network
    restart: unless-stopped
    command: [ "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]

  # Candidates Service (NestJS + React SSR)
  candidates-service:
    build:
      context: ./candidates-service
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-candidates-service
    ports:
      - "${CANDIDATES_SERVICE_PORT}:3002"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3002
      - COMPANIES_API_URL=http://companies-backend:3000
    volumes:
      - ./candidates-service:/app
      - /app/node_modules
    depends_on:
      - companies-backend
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Redis (Message Queue)
  redis:
    image: redis:7-alpine
    container_name: cognitive-ats-redis
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # MinIO (simulador do S3)
  minio:
    image: minio/minio:latest
    container_name: cognitive-ats-minio
    ports:
      - "9000:9000"      # API
      - "9001:9001"      # Console Web
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Async Task Service Consumer
  async-task-consumer:
    build:
      context: ./async-task-service
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-async-task-consumer
    environment:
      # Redis Configuration
      - REDIS_URL=${REDIS_URL}
      # Queue Configuration
      - APPLICATIONS_QUEUE_NAME=${APPLICATIONS_QUEUE_NAME}
      - AI_SCORE_QUEUE_NAME=${AI_SCORE_QUEUE_NAME:-ai-score-queue}
      - QUESTION_RESPONSES_QUEUE_NAME=${QUESTION_RESPONSES_QUEUE_NAME}
      # Storage Configuration
      - STORAGE_SERVICE_ENDPOINT=${STORAGE_SERVICE_ENDPOINT}
      - STORAGE_URL=${STORAGE_SERVICE_ENDPOINT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - RESUMES_BUCKET_NAME=${RESUMES_BUCKET_NAME}
      # Service URLs
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - COMPANIES_BACKEND_URL=${COMPANIES_BACKEND_URL:-http://companies-backend:3000}
      - COMPANIES_API_URL=http://companies-backend:3000
      # Evaluation Configuration
      - EVALUATION_PROVIDER=${EVALUATION_PROVIDER:-openai}
      - EVALUATION_MODEL=${EVALUATION_MODEL:-gpt-4}
      # Consumer Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BLPOP_TIMEOUT_SECONDS=${BLPOP_TIMEOUT_SECONDS:-5}
      - NUM_WORKERS=${NUM_WORKERS:-3}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_BASE_DELAY_SECONDS=${RETRY_BASE_DELAY_SECONDS:-2}
    volumes:
      - ./async-task-service/src:/app/src
    depends_on:
      - redis
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Redis Admin (phpRedisAdmin)
  redis-admin:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: cognitive-ats-redis-admin
    ports:
      - "${REDIS_ADMIN_PORT:-9091}:80"
    environment:
      - REDIS_1_HOST=redis
      - REDIS_1_PORT=6379
      - REDIS_1_NAME=0
    depends_on:
      - redis
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Caddy - Proxy Reverso
  caddy-proxy:
    image: caddy:2.7-alpine
    container_name: cognitive-ats-caddy-proxy
    ports:
      - "${CADDY_PORT_HTTP}:80"
      - "${CADDY_PORT_HTTPS}:443"
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - cognitive-ats-network
    restart: unless-stopped

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
  minio_data:
  redis_data:

networks:
  cognitive-ats-network:
    driver: bridge 