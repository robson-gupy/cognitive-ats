services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cognitive-ats-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Backend NestJS - Companies Service
  companies-backend:
    build:
      context: ./companies-service/backend
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-companies-backend-dev
    ports:
      - "${COMPANIES_BACKEND_PORT}:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_DATABASE=${DB_DATABASE}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - ENDPOINT_URL=${ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - RESUMES_BUCKET_NAME=${RESUMES_BUCKET_NAME}
      - APPLICATIONS_SQS_QUEUE_NAME=${APPLICATIONS_SQS_QUEUE_NAME}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./companies-service/backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - ai-service
      - localstack
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Frontend React - Companies Service (Desenvolvimento)
  companies-frontend:
    build:
      context: ./companies-service/frontend
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-companies-frontend-dev
    ports:
      - "${COMPANIES_FRONTEND_PORT}:5173"
    volumes:
      - ./companies-service/frontend:/app
      - /app/node_modules
    depends_on:
      - companies-backend
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # AI Service (FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: cognitive-ats-ai-service
    ports:
      - "${AI_SERVICE_PORT}:8000"
    environment:
      - DEFAULT_AI_PROVIDER=${DEFAULT_AI_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-gpt-4}
      - DEFAULT_MAX_TOKENS=${DEFAULT_MAX_TOKENS:-1000}
      - DEFAULT_TEMPERATURE=${DEFAULT_TEMPERATURE:-0.7}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    volumes:
      - ./ai-service:/app
    networks:
      - cognitive-ats-network
    restart: unless-stopped
    command: [ "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]

  # Candidates Service (NestJS + React SSR)
  candidates-service:
    build:
      context: ./candidates-service
      dockerfile: Dockerfile.dev
    container_name: cognitive-ats-candidates-service
    ports:
      - "${CANDIDATES_SERVICE_PORT}:3002"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3002
      - COMPANIES_API_URL=http://companies-backend:3000
    volumes:
      - ./candidates-service:/app
      - /app/node_modules
    depends_on:
      - companies-backend
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # SQS Listener Service
  sqs-listener:
    build:
      context: ./ai-service
      dockerfile: consumer/Dockerfile.listener
    container_name: cognitive-ats-sqs-listener
    environment:
      - APPLICATIONS_SQS_QUEUE_NAME=${APPLICATIONS_SQS_QUEUE_NAME}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SQS_MAX_RETRIES=${SQS_MAX_RETRIES:-3}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BACKEND_URL=${BACKEND_URL:-http://companies-backend:3000}
    volumes:
      - ./ai-service:/app
    depends_on:
      - localstack
      - companies-backend
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # LocalStack (AWS Services Simulator)
  localstack:
    image: localstack/localstack:latest
    container_name: cognitive-ats-localstack
    ports:
      - "${LOCALSTACK_PORT}:4566"
    environment:
      - SERVICES=${LOCALSTACK_SERVICES}
      - DEBUG=${LOCALSTACK_DEBUG}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - localstack_data:/var/lib/localstack
    networks:
      - cognitive-ats-network
    restart: unless-stopped

  # Caddy - Proxy Reverso
  caddy-proxy:
    image: caddy:2.7-alpine
    container_name: cognitive-ats-caddy-proxy
    ports:
      - "${CADDY_PORT_HTTP}:80"
      - "${CADDY_PORT_HTTPS}:443"
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - companies-frontend
      - companies-backend
      - ai-service
      - candidates-service
    networks:
      - cognitive-ats-network
    restart: unless-stopped

volumes:
  postgres_data:
  localstack_data:
  caddy_data:
  caddy_config:

networks:
  cognitive-ats-network:
    driver: bridge 