#!/usr/bin/env python3
"""
Consumer SQS para processamento ass√≠ncrono de curr√≠culos

Este √© o ponto de entrada principal que orquestra todos os servi√ßos
para processar mensagens SQS de curr√≠culos de forma modular e organizada.
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from consumer.config.settings import settings
from consumer.utils.logger import logger
from consumer.handlers.message_handler import MessageHandler


async def main():
    """Fun√ß√£o principal do consumer"""
    print("=== SQS Resume Consumer ===")
    print(f"Vers√£o: {getattr(settings, '__version__', '1.0.0')}")
    print()
    
    # Valida configura√ß√µes
    if not settings.validate():
        logger.error("‚ùå Configura√ß√µes inv√°lidas")
        logger.error("   Verifique as vari√°veis de ambiente obrigat√≥rias")
        sys.exit(1)
    
    # Exibe informa√ß√µes de configura√ß√£o
    logger.info("üîß Configura√ß√µes carregadas")
    logger.info(f"   Fila SQS: {settings.sqs.queue_name}")
    logger.info(f"   Endpoint SQS: {settings.sqs.endpoint_url}")
    logger.info(f"   Backend: {settings.backend.url}")
    logger.info(f"   Max Retries: {settings.sqs.max_retries}")
    logger.info(f"   Log Level: {settings.logging.level}")
    print()
    
    try:
        # Cria e inicia o handler de mensagens
        message_handler = MessageHandler()
        
        # Exibe status dos servi√ßos
        status = message_handler.get_status()
        logger.info("üìä Status dos servi√ßos:")
        logger.info(f"   SQS: {'‚úÖ Conectado' if status['sqs'] else '‚ùå N√£o conectado'}")
        logger.info(f"   Backend: {'‚úÖ Dispon√≠vel' if status['backend']['available'] else '‚ùå Indispon√≠vel'}")
        logger.info(f"   IA Service: {'‚úÖ Inicializado' if status['ai_service'] == 'initialized' else '‚ùå N√£o inicializado'}")
        print()
        
        # Inicia o processamento de mensagens
        await message_handler.process_messages()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Consumer interrompido pelo usu√°rio")
    except Exception as e:
        logger.critical("üí• Erro cr√≠tico no consumer", error=str(e))
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Consumer interrompido")
        sys.exit(0)
    except Exception as e:
        print(f"üí• Erro fatal: {e}")
        sys.exit(1)
