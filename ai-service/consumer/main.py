#!/usr/bin/env python3
"""
Consumer SQS para processamento ass√≠ncrono de curr√≠culos e scores

Este √© o ponto de entrada principal que orquestra todos os servi√ßos
para processar mensagens SQS de curr√≠culos e scores de forma modular e organizada.
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from consumer.config.settings import settings
from consumer.utils.logger import logger
from consumer.handlers.message_handler import MessageHandler
from consumer.handlers.ai_score_message_handler import AIScoreMessageHandler


async def main():
    """Fun√ß√£o principal do consumer com dois listeners"""
    print("=== SQS Consumer - CVs e Scores ===")
    print(f"Vers√£o: {getattr(settings, '__version__', '1.0.0')}")
    print()
    
    # Valida configura√ß√µes
    if not settings.validate():
        logger.error("‚ùå Configura√ß√µes inv√°lidas")
        logger.error("   Verifique as vari√°veis de ambiente obrigat√≥rias")
        sys.exit(1)
    
    # Exibe informa√ß√µes de configura√ß√£o
    logger.info("üîß Configura√ß√µes carregadas")
    logger.info(f"   Fila SQS CVs: {settings.sqs.queue_name}")
    logger.info(f"   Fila SQS Scores: {settings.ai_score_sqs.queue_name}")
    logger.info(f"   Endpoint SQS: {settings.sqs.endpoint_url}")
    logger.info(f"   Backend: {settings.backend.url}")
    logger.info(f"   Database: {settings.database.host}:{settings.database.port}/{settings.database.name}")
    logger.info(f"   Max Retries: {settings.sqs.max_retries}")
    logger.info(f"   Log Level: {settings.logging.level}")
    print()
    
    try:
        # Cria os handlers de mensagens
        resume_handler = MessageHandler()
        score_handler = AIScoreMessageHandler()
        
        # Exibe status dos servi√ßos
        resume_status = await resume_handler.get_status()
        score_status = await score_handler.get_status()
        
        logger.info("üìä Status dos servi√ßos:")
        logger.info(f"   SQS CVs: {'‚úÖ Conectado' if resume_status['sqs'] else '‚ùå N√£o conectado'}")
        logger.info(f"   SQS Scores: {'‚úÖ Conectado' if score_status['sqs'] else '‚ùå N√£o conectado'}")
        logger.info(f"   Backend: {'‚úÖ Dispon√≠vel' if resume_status['backend']['available'] else '‚ùå Indispon√≠vel'}")
        logger.info(f"   IA Service CVs: {'‚úÖ Inicializado' if resume_status['ai_service'] == 'initialized' else '‚ùå N√£o inicializado'}")
        logger.info(f"   IA Service Scores: {'‚úÖ Inicializado' if score_status['ai_service'] == 'initialized' else '‚ùå N√£o inicializado'}")
        logger.info(f"   Database: {resume_status['database']['status']}")
        print()
        
        # Inicia os dois listeners em paralelo
        logger.info("üöÄ Iniciando listeners em paralelo...")
        
        await asyncio.gather(
            resume_handler.process_messages(),
            score_handler.process_messages()
        )
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Consumer interrompido pelo usu√°rio")
    except Exception as e:
        logger.critical(f"üí• Erro cr√≠tico no consumer: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Consumer interrompido")
        sys.exit(0)
    except Exception as e:
        print(f"üí• Erro fatal: {e}")
        sys.exit(1)
