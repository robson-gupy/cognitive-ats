"""
Handler centralizado para tratamento de erros
"""

from typing import Optional, Dict, Any
from consumer.utils.logger import logger


class ErrorHandler:
    """Handler centralizado para tratamento de erros"""
    
    @staticmethod
    def handle_sqs_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros relacionados ao SQS
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        error_type = type(error).__name__
        
        if "NoCredentialsError" in error_type:
            logger.critical(
                "üîê Erro de credenciais AWS",
                error=str(error),
                context=context
            )
        elif "ClientError" in error_type:
            logger.error(
                "üì° Erro de cliente SQS",
                error=str(error),
                context=context
            )
        else:
            logger.error(
                "‚ùå Erro inesperado SQS",
                error=str(error),
                context=context
            )
    
    @staticmethod
    def handle_download_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros relacionados ao download
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        error_type = type(error).__name__
        
        if "Timeout" in error_type:
            logger.warning(
                "‚è∞ Timeout no download",
                error=str(error),
                context=context
            )
        elif "ConnectionError" in error_type:
            logger.error(
                "üåê Erro de conex√£o no download",
                error=str(error),
                context=context
            )
        else:
            logger.error(
                "‚ùå Erro inesperado no download",
                error=str(error),
                context=context
            )
    
    @staticmethod
    def handle_ai_service_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros relacionados ao servi√ßo de IA
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        error_type = type(error).__name__
        
        if "AuthenticationError" in error_type:
            logger.critical(
                "üîë Erro de autentica√ß√£o com servi√ßo de IA",
                error=str(error),
                context=context
            )
        elif "RateLimitError" in error_type:
            logger.warning(
                "üö¶ Rate limit atingido no servi√ßo de IA",
                error=str(error),
                context=context
            )
        else:
            logger.error(
                "‚ùå Erro inesperado no servi√ßo de IA",
                error=str(error),
                context=context
            )
    
    @staticmethod
    def handle_backend_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros relacionados ao backend
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        error_type = type(error).__name__
        
        if "ConnectionError" in error_type:
            logger.error(
                "üåê Erro de conex√£o com backend",
                error=str(error),
                context=context
            )
        elif "Timeout" in error_type:
            logger.warning(
                "‚è∞ Timeout na comunica√ß√£o com backend",
                error=str(error),
                context=context
            )
        else:
            logger.error(
                "‚ùå Erro inesperado na comunica√ß√£o com backend",
                error=str(error),
                context=context
            )
    
    @staticmethod
    def handle_validation_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros de valida√ß√£o
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        logger.warning(
            "‚ö†Ô∏è Erro de valida√ß√£o",
            error=str(error),
            context=context
        )
    
    @staticmethod
    def handle_unexpected_error(error: Exception, context: Dict[str, Any]) -> None:
        """
        Trata erros inesperados
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
        """
        logger.critical(
            "üí• Erro inesperado cr√≠tico",
            error=str(error),
            error_type=type(error).__name__,
            context=context
        )
    
    @staticmethod
    def get_error_summary() -> Dict[str, Any]:
        """
        Retorna um resumo dos erros tratados
        
        Returns:
            Dicion√°rio com resumo dos erros
        """
        # Esta √© uma implementa√ß√£o b√°sica
        # Em produ√ß√£o, voc√™ pode querer manter estat√≠sticas de erros
        return {
            'error_handler': 'active',
            'version': '1.0.0'
        }
