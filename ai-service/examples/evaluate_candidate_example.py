#!/usr/bin/env python3
"""
Exemplo de uso do endpoint de avalia√ß√£o de candidatos
"""
import requests
import json

# URL base do servi√ßo (ajuste conforme necess√°rio)
BASE_URL = "http://localhost:8000"

def evaluate_candidate_example():
    """Exemplo de avalia√ß√£o de candidato"""
    
    # Dados do candidato
    resume_data = {
        "personal_info": {
            "name": "Ana Costa",
            "email": "ana.costa@email.com",
            "phone": "(11) 99999-9999"
        },
        "education": [
            {
                "degree": "Bacharelado em Ci√™ncia da Computa√ß√£o",
                "institution": "Universidade de S√£o Paulo",
                "year": "2021",
                "gpa": "8.5"
            },
            {
                "degree": "MBA em Gest√£o de Projetos",
                "institution": "FGV",
                "year": "2023",
                "gpa": "9.0"
            }
        ],
        "experience": [
            {
                "title": "Desenvolvedora Full Stack Senior",
                "company": "Tech Solutions Ltda",
                "duration": "3 anos",
                "description": "Lideran√ßa de equipe de 5 desenvolvedores, desenvolvimento de aplica√ß√µes web com React, Node.js e Python. Implementa√ß√£o de arquitetura microservi√ßos."
            },
            {
                "title": "Desenvolvedora Frontend",
                "company": "StartupXYZ",
                "duration": "2 anos",
                "description": "Desenvolvimento de interfaces de usu√°rio com React e TypeScript. Otimiza√ß√£o de performance e acessibilidade."
            }
        ],
        "skills": [
            "JavaScript", "TypeScript", "React", "Node.js", "Python", 
            "Docker", "AWS", "Git", "Agile", "Scrum"
        ],
        "languages": [
            {"language": "Portugu√™s", "level": "Nativo"},
            {"language": "Ingl√™s", "level": "Avan√ßado"},
            {"language": "Espanhol", "level": "Intermedi√°rio"}
        ],
        "achievements": [
            "Redu√ß√£o de 40% no tempo de carregamento das aplica√ß√µes",
            "Implementa√ß√£o de CI/CD que reduziu deploys de 2 horas para 15 minutos",
            "Mentoria de 3 desenvolvedores juniores"
        ]
    }
    
    # Dados da vaga
    job_data = {
        "title": "Tech Lead Full Stack",
        "description": "Lideran√ßa t√©cnica de equipe de desenvolvimento, arquitetura de sistemas, desenvolvimento de aplica√ß√µes web escal√°veis.",
        "requirements": [
            "Experi√™ncia com React, Node.js e Python",
            "Conhecimento em arquitetura de microservi√ßos",
            "Experi√™ncia em lideran√ßa t√©cnica",
            "Conhecimento em AWS e Docker",
            "Experi√™ncia com metodologias √°geis"
        ],
        "responsibilities": [
            "Liderar equipe de desenvolvimento",
            "Definir arquitetura t√©cnica",
            "Code review e mentoria",
            "Participar de decis√µes t√©cnicas",
            "Desenvolver features cr√≠ticas"
        ],
        "education_required": "Bacharelado em Ci√™ncia da Computa√ß√£o ou √°reas relacionadas",
        "experience_required": "5+ anos em desenvolvimento, 2+ anos em lideran√ßa",
        "skills_required": [
            "JavaScript", "TypeScript", "React", "Node.js", "Python",
            "Docker", "AWS", "Git", "Lideran√ßa t√©cnica"
        ]
    }
    
    # Respostas das perguntas
    question_responses = [
        {
            "question": "Como voc√™ lidera uma equipe t√©cnica?",
            "answer": "Promovo comunica√ß√£o clara, estabele√ßo processos de code review, fa√ßo pair programming e incentivo o aprendizado cont√≠nuo. Uso metodologias √°geis e reuni√µes di√°rias para acompanhar o progresso."
        },
        {
            "question": "Qual sua experi√™ncia com arquitetura de microservi√ßos?",
            "answer": "Implementei arquitetura de microservi√ßos em 3 projetos, usando Docker e Kubernetes. Defini APIs RESTful e padr√µes de comunica√ß√£o entre servi√ßos. Trabalhei com service mesh e monitoramento distribu√≠do."
        },
        {
            "question": "Como voc√™ lida com prazos apertados?",
            "answer": "Priorizo tarefas por impacto e urg√™ncia, divido projetos em sprints menores, comunico expectativas realistas e uso ferramentas de gest√£o de projeto. Mantenho a qualidade do c√≥digo mesmo sob press√£o."
        }
    ]
    
    # Monta a requisi√ß√£o
    request_data = {
        "resume": resume_data,
        "job": job_data,
        "question_responses": question_responses,
        "provider": "openai",  # ou "anthropic"
        "model": "gpt-4"  # ou outro modelo dispon√≠vel
    }
    
    try:
        # Faz a requisi√ß√£o
        response = requests.post(
            f"{BASE_URL}/ai/evaluate-candidate",
            json=request_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Avalia√ß√£o realizada com sucesso!")
            print("\nüìä Resultados da Avalia√ß√£o:")
            print(f"   Nota Geral: {result['overall_score']}/100")
            print(f"   Respostas das Perguntas: {result['question_responses_score']}/100")
            print(f"   Forma√ß√£o Acad√™mica: {result['education_score']}/100")
            print(f"   Experi√™ncia Profissional: {result['experience_score']}/100")
            print(f"   Provider: {result['provider']}")
            print(f"   Modelo: {result.get('model', 'N/A')}")
            
            # An√°lise detalhada
            print("\nüìã An√°lise Detalhada:")
            if result['overall_score'] >= 80:
                print("   üü¢ Excelente candidato - Altamente recomendado")
            elif result['overall_score'] >= 60:
                print("   üü° Bom candidato - Recomendado com ressalvas")
            else:
                print("   üî¥ Candidato n√£o adequado - N√£o recomendado")
                
        else:
            print(f"‚ùå Erro na requisi√ß√£o: {response.status_code}")
            print(f"Resposta: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")


def evaluate_candidate_simple():
    """Exemplo simplificado de avalia√ß√£o"""
    
    request_data = {
        "resume": {
            "personal_info": {"name": "Jo√£o Silva"},
            "education": [
                {
                    "degree": "T√©cnico em Inform√°tica",
                    "institution": "Escola T√©cnica",
                    "year": "2020"
                }
            ],
            "experience": [
                {
                    "title": "Desenvolvedor Frontend",
                    "company": "Empresa ABC",
                    "duration": "1 ano",
                    "description": "Desenvolvimento com React"
                }
            ],
            "skills": ["HTML", "CSS", "JavaScript", "React"]
        },
        "job": {
            "title": "Desenvolvedor Frontend",
            "description": "Desenvolvimento de interfaces web",
            "requirements": ["React", "JavaScript"],
            "education_required": "T√©cnico em Inform√°tica",
            "experience_required": "1+ anos"
        }
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/ai/evaluate-candidate",
            json=request_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Avalia√ß√£o simples realizada!")
            print(f"Nota Geral: {result['overall_score']}/100")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    print("üöÄ Exemplo de Avalia√ß√£o de Candidatos")
    print("=" * 50)
    
    print("\n1. Avalia√ß√£o Completa:")
    evaluate_candidate_example()
    
    print("\n" + "=" * 50)
    print("\n2. Avalia√ß√£o Simplificada:")
    evaluate_candidate_simple()
